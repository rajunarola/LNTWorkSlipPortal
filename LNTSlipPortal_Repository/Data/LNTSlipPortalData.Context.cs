//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LNTSlipPortal_Repository.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LNTSlipPortalEntities : DbContext
    {
        public LNTSlipPortalEntities()
            : base("name=LNTSlipPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EmployeeMaster> EmployeeMasters { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<RAW> RAWS { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<Scope> Scopes { get; set; }
        public virtual DbSet<ScopeOfWork> ScopeOfWorks { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StatusLog> StatusLogs { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
    
        public virtual int GetAutoCompleteData(string keyword, Nullable<int> count, string tableName, string displayColumnName, string valueColumnName, string whereClause, string type)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var displayColumnNameParameter = displayColumnName != null ?
                new ObjectParameter("DisplayColumnName", displayColumnName) :
                new ObjectParameter("DisplayColumnName", typeof(string));
    
            var valueColumnNameParameter = valueColumnName != null ?
                new ObjectParameter("ValueColumnName", valueColumnName) :
                new ObjectParameter("ValueColumnName", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutoCompleteData", keywordParameter, countParameter, tableNameParameter, displayColumnNameParameter, valueColumnNameParameter, whereClauseParameter, typeParameter);
        }
    
        public virtual int GetDataForGridWeb(string tableName, string columnsName, string sortOrder, string sortColumn, Nullable<int> pageNumber, Nullable<int> recordPerPage, string whereClause)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnsNameParameter = columnsName != null ?
                new ObjectParameter("ColumnsName", columnsName) :
                new ObjectParameter("ColumnsName", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordPerPageParameter = recordPerPage.HasValue ?
                new ObjectParameter("RecordPerPage", recordPerPage) :
                new ObjectParameter("RecordPerPage", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDataForGridWeb", tableNameParameter, columnsNameParameter, sortOrderParameter, sortColumnParameter, pageNumberParameter, recordPerPageParameter, whereClauseParameter);
        }
    }
}
